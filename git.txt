Undo git add before commit:
    git reset FILE

Undo your last commit, so you can redo it.
    git reset --soft HEAD~1
        Note the --soft flag: this makes sure that the changes in undone revisions are preserved.
        If you don't want to keep these changes, use the --hard flag.

Get information on the last commit for the current branch:
    git log -1

Get the date of the first commit
    git log --reverse

Get the log differences between two branches
    git log [branch]..[branch]

Get just the filenames from a diff
    git diff --name-only

Make a new branch
    git branch my_branch_name

List available branches and current branch:
    git branch -l

Get the remote url:
    git remote -v

Get the remote branches:
    git branch -r

Re-target/change the remote repository
    git remote set-url [branch] [new remote repository]
        git remote set-url master [repository location]

Get the local branches:
    git branch

Delete a local branch:
    git branch -d <branchname>

Stage new files and modified files, without deletions.
    git add .

Stage changes to tracked files (including deletes), does not add new files.
    git add -u

Stage ALL changes.
    git add -A

Remove a file from version control (while keeping it in your local repository). Don't forget to update .gitignore.
    git rm --cached <file>

Remove a project from version control
    Delete the .git directory.

Push a local branch to a remote origin:
    git push <REMOTENAME> <BRANCHNAME> 
        example: git push origin my_branch

Delete a remote branch:
    git push --delete <REMOTENAME> <BRANCHNAME>
        git push --delete origin branch_to_delete

Rollback to a previous commit (use --hard to reset BOTH the files and commit history)
    git reset --hard <tag/branch/commit_id>
        git reset --hard 326caed3996a5c37cc72b0dd18ebe8366d985902

If you've rolled back and want to make the repository match the current state of your rollback, do a force push update
    git push origin master -f

Git merge current branch with another branch and specify a merge strategy
    git merge -s <ours|something else> <branch>
        git merge -s ours master
    git merge --strategy-option theirs <branch> //For some reason, 'theirs' isn't a legitimate strategy.

Undo a merge before commit. Syntax depends on git version: http://stackoverflow.com/questions/5741407/how-to-undo-a-git-merge-with-conflicts
    git reset --merge
    git merge --abort
    git reset --hard

Review merge results without committing or fast-forwarding. Basically a dry-run option
    git merge --no-commit --no-ff $BRANCH
    
Initialize a new repository
   git init (from the current repository)
   git init --bare (to initialize a blank storage repository)

Update remote tracking branches
   git fetch

Show the differences for a specific commit
    git show [commit id]


